{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = userModel;\n\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = await this.users.find();\n    return users;\n  }\n\n  public async findUserById(userId: string): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, \"You're not userId\");\n\n    const findUser: User = await this.users.findOne({ _id: userId });\n    if (!findUser) throw new HttpException(409, \"You're not user\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\n\n    const findUser: User = await this.users.findOne({ email: userData.email });\n    if (findUser) throw new HttpException(409, `You're email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({ ...userData, password: hashedPassword });\n\n    return createUserData;\n  }\n\n  public async updateUser(userId: string, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\n\n    if (userData.email) {\n      const findUser: User = await this.users.findOne({ email: userData.email });\n      if (findUser && findUser._id != userId) throw new HttpException(409, `You're email ${userData.email} already exists`);\n    }\n\n    if (userData.password) {\n      const hashedPassword = await hash(userData.password, 10);\n      userData = { ...userData, password: hashedPassword };\n    }\n\n    const updateUserById: User = await this.users.findByIdAndUpdate(userId, { userData });\n    if (!updateUserById) throw new HttpException(409, \"You're not user\");\n\n    return updateUserById;\n  }\n\n  public async deleteUser(userId: string): Promise<User> {\n    const deleteUserById: User = await this.users.findByIdAndDelete(userId);\n    if (!deleteUserById) throw new HttpException(409, \"You're not user\");\n\n    return deleteUserById;\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","users","find","findUserById","userId","findUser","findOne","_id","createUser","userData","email","hashedPassword","password","createUserData","create","updateUser","updateUserById","findByIdAndUpdate","deleteUser","deleteUserById","findByIdAndDelete"],"mappings":"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"}