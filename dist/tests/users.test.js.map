{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport mongoose from 'mongoose';\nimport request from 'supertest';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport UsersRoute from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response fineAll Users', async () => {\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.find = jest.fn().mockReturnValue([\n        {\n          _id: 'qpwoeiruty',\n          email: 'a@email.com',\n          password: await bcrypt.hash('q1w2e3r4!', 10),\n        },\n        {\n          _id: 'alskdjfhg',\n          email: 'b@email.com',\n          password: await bcrypt.hash('a1s2d3f4!', 10),\n        },\n        {\n          _id: 'zmxncbv',\n          email: 'c@email.com',\n          password: await bcrypt.hash('z1x2c3v4!', 10),\n        },\n      ]);\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response findOne User', async () => {\n      const userId = 'qpwoeiruty';\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue({\n        _id: 'qpwoeiruty',\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response Create User', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        _id: '60706478aad6c9ad19a31c84',\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response Update User', async () => {\n      const userId = '60706478aad6c9ad19a31c84';\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      if (userData.email) {\n        users.findOne = jest.fn().mockReturnValue({\n          _id: userId,\n          email: userData.email,\n          password: await bcrypt.hash(userData.password, 10),\n        });\n      }\n\n      users.findByIdAndUpdate = jest.fn().mockReturnValue({\n        _id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response Delete User', async () => {\n      const userId = '60706478aad6c9ad19a31c84';\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findByIdAndDelete = jest.fn().mockReturnValue({\n        _id: '60706478aad6c9ad19a31c84',\n        email: 'test@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","users","usersController","userService","find","jest","fn","mockReturnValue","_id","email","password","hash","connect","app","getServer","get","path","expect","userId","findOne","userData","create","post","send","findByIdAndUpdate","put","findByIdAndDelete","delete"],"mappings":"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"}